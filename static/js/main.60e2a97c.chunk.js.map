{"version":3,"sources":["pages/Home.js","pages/CubeExample/loadShader.js","pages/CubeExample/createShaderProgram.js","pages/CubeExample/vsSource.js","pages/CubeExample/fsSource.js","pages/CubeExample/initBuffers.js","pages/CubeExample/drawScene.js","pages/CubeExample/CanvasCube.js","pages/CubeExample/index.js","pages/CubeExample/CubeExample.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","react_router_dom","to","loadShader","gl","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","errorMessage","getShaderInfoLog","deleteShader","Error","createShaderProgram","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","initBuffers","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","faceColors","colors","j","length","c","concat","colorBuffer","indexBuffer","ELEMENT_ARRAY_BUFFER","Uint16Array","position","color","indices","drawScene","programInfo","buffers","rotationX","rotationY","rotationZ","clearColor","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","fieldOfView","Math","PI","aspect","canvas","clientWidth","clientHeight","projectionMatrix","mat4","create","perspective","modelViewMatrix","translate","rotate","FLOAT","vertexAttribPointer","attribLocations","vertexPosition","enableVertexAttribArray","vertexColor","useProgram","program","uniformMatrix4fv","uniformLocations","UNSIGNED_SHORT","drawElements","TRIANGLES","CanvasCube","renderCanvas","_this$props","_this","props","this","getContext","alert","getGl","getAttribLocation","getUniformLocation","createProgramInfo","requestAnimationFrame","prevProps","namesOfProps","find","propName","hasPropsChanged","_this2","ref","width","height","Component","CubeExample","state","_this$state","className","CubeExample_CanvasCube","step","value","onChange","event","setState","target","href","App","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.60e2a97c.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Home = () => (\n    <section>\n        <ul>\n            <li>\n                <Link to=\"/cube-example\">Cube Example</Link>\n            </li>\n        </ul>\n    </section>\n);\nexport default Home;\n","const loadShader = (gl, type, source) => {\n    const shader = gl.createShader(type);\n\n    // Send the source to the shader object\n\n    gl.shaderSource(shader, source);\n\n    // Compile the shader program\n\n    gl.compileShader(shader);\n\n    // See if it compiled successfully\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        const errorMessage =\n            \"An error occurred compiling the shaders: \" +\n            gl.getShaderInfoLog(shader);\n        gl.deleteShader(shader);\n        throw new Error(errorMessage);\n    }\n\n    return shader;\n};\n\nexport default loadShader;\n","import loadShader from \"./loadShader\";\nimport vsSource from \"./vsSource\";\nimport fsSource from \"./fsSource\";\n\nconst createShaderProgram = gl => {\n    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);\n    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\n\n    // Create the shader program\n\n    const shaderProgram = gl.createProgram();\n    gl.attachShader(shaderProgram, vertexShader);\n    gl.attachShader(shaderProgram, fragmentShader);\n    gl.linkProgram(shaderProgram);\n\n    // If creating the shader program failed, alert\n\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n        throw new Error(\n            \"Unable to initialize the shader program: \" +\n                gl.getProgramInfoLog(shaderProgram)\n        );\n    }\n\n    return shaderProgram;\n};\n\nexport default createShaderProgram;\n","const vsSource = `\n    attribute vec4 aVertexPosition;\n    attribute vec4 aVertexColor;\n\n    uniform mat4 uModelViewMatrix;\n    uniform mat4 uProjectionMatrix;\n\n    varying lowp vec4 vColor;\n\n    void main(void) {\n      gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\n      vColor = aVertexColor;\n    }\n  `;\n\nexport default vsSource;\n","const fsSource = `\n    varying lowp vec4 vColor;\n\n    void main(void) {\n      gl_FragColor = vColor;\n    }\n  `;\nexport default fsSource;\n","const initBuffers = gl => {\n    // Create a buffer for the cube's vertex positions.\n\n    const positionBuffer = gl.createBuffer();\n\n    // Select the positionBuffer as the one to apply buffer\n    // operations to from here out.\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n    // Now create an array of positions for the cube.\n\n    const positions = [\n        // Front face\n        -1.0,\n        -1.0,\n        1.0,\n        1.0,\n        -1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        -1.0,\n        1.0,\n        1.0,\n\n        // Back face\n        -1.0,\n        -1.0,\n        -1.0,\n        -1.0,\n        1.0,\n        -1.0,\n        1.0,\n        1.0,\n        -1.0,\n        1.0,\n        -1.0,\n        -1.0,\n\n        // Top face\n        -1.0,\n        1.0,\n        -1.0,\n        -1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        -1.0,\n\n        // Bottom face\n        -1.0,\n        -1.0,\n        -1.0,\n        1.0,\n        -1.0,\n        -1.0,\n        1.0,\n        -1.0,\n        1.0,\n        -1.0,\n        -1.0,\n        1.0,\n\n        // Right face\n        1.0,\n        -1.0,\n        -1.0,\n        1.0,\n        1.0,\n        -1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        -1.0,\n        1.0,\n\n        // Left face\n        -1.0,\n        -1.0,\n        -1.0,\n        -1.0,\n        -1.0,\n        1.0,\n        -1.0,\n        1.0,\n        1.0,\n        -1.0,\n        1.0,\n        -1.0\n    ];\n\n    // Now pass the list of positions into WebGL to build the\n    // shape. We do this by creating a Float32Array from the\n    // JavaScript array, then use it to fill the current buffer.\n\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\n\n    // Now set up the colors for the faces. We'll use solid colors\n    // for each face.\n\n    const faceColors = [\n        [0.5, 0.5, 0.5, 1.0], // Front face: white\n        [1.0, 0.0, 0.0, 1.0], // Back face: red\n        [0.0, 1.0, 0.0, 1.0], // Top face: green\n        [0.0, 0.0, 1.0, 1.0], // Bottom face: blue\n        [1.0, 1.0, 0.0, 1.0], // Right face: yellow\n        [1.0, 0.0, 1.0, 1.0] // Left face: purple\n    ];\n\n    // Convert the array of colors into a table for all the vertices.\n\n    var colors = [];\n\n    for (var j = 0; j < faceColors.length; ++j) {\n        const c = faceColors[j];\n\n        // Repeat each color four times for the four vertices of the face\n        colors = colors.concat(c, c, c, c);\n    }\n\n    const colorBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);\n\n    // Build the element array buffer; this specifies the indices\n    // into the vertex arrays for each face's vertices.\n\n    const indexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\n\n    // This array defines each face as two triangles, using the\n    // indices into the vertex array to specify each triangle's\n    // position.\n\n    const indices = [\n        0,\n        1,\n        2,\n        0,\n        2,\n        3, // front\n        4,\n        5,\n        6,\n        4,\n        6,\n        7, // back\n        8,\n        9,\n        10,\n        8,\n        10,\n        11, // top\n        12,\n        13,\n        14,\n        12,\n        14,\n        15, // bottom\n        16,\n        17,\n        18,\n        16,\n        18,\n        19, // right\n        20,\n        21,\n        22,\n        20,\n        22,\n        23 // left\n    ];\n\n    // Now send the element array to GL\n\n    gl.bufferData(\n        gl.ELEMENT_ARRAY_BUFFER,\n        new Uint16Array(indices),\n        gl.STATIC_DRAW\n    );\n\n    return {\n        position: positionBuffer,\n        color: colorBuffer,\n        indices: indexBuffer\n    };\n};\n\nexport default initBuffers;\n","import { mat4 } from \"gl-matrix\";\n\nconst drawScene = (\n  gl,\n  programInfo,\n  buffers,\n  rotationX,\n  rotationY,\n  rotationZ\n) => {\n  gl.clearColor(1.0, 1.0, 1.0, 1.0); // Clear to black, fully opaque\n  gl.clearDepth(1.0); // Clear everything\n  gl.enable(gl.DEPTH_TEST); // Enable depth testing\n  gl.depthFunc(gl.LEQUAL); // Near things obscure far things\n\n  // Clear the canvas before we start drawing on it.\n\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n  // Create a perspective matrix, a special matrix that is\n  // used to simulate the distortion of perspective in a camera.\n  // Our field of view is 45 degrees, with a width/height\n  // ratio that matches the display size of the canvas\n  // and we only want to see objects between 0.1 units\n  // and 100 units away from the camera.\n\n  const fieldOfView = (45 * Math.PI) / 180; // in radians\n  const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\n  const zNear = 0.1;\n  const zFar = 100.0;\n  const projectionMatrix = mat4.create();\n\n  // note: glmatrix.js always has the first argument\n  // as the destination to receive the result.\n  mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\n\n  // Set the drawing position to the \"identity\" point, which is\n  // the center of the scene.\n  const modelViewMatrix = mat4.create();\n\n  // Now move the drawing position a bit to where we want to\n  // start drawing the square.\n\n  mat4.translate(\n    modelViewMatrix, // destination matrix\n    modelViewMatrix, // matrix to translate\n    [-0.0, 0.0, -6.0]\n  ); // amount to translate\n  mat4.rotate(\n    modelViewMatrix, // destination matrix\n    modelViewMatrix, // matrix to rotate\n    rotationX, // amount to rotate in radians\n    [1, 0, 0]\n  ); // axis to rotate around (X)\n  mat4.rotate(\n    modelViewMatrix, // destination matrix\n    modelViewMatrix, // matrix to rotate\n    rotationY, // amount to rotate in radians\n    [0, 1, 0]\n  ); // axis to rotate around (Y)\n  mat4.rotate(\n    modelViewMatrix, // destination matrix\n    modelViewMatrix, // matrix to rotate\n    rotationZ, // amount to rotate in radians\n    [0, 0, 1]\n  ); // axis to rotate around (Z)\n\n  // Tell WebGL how to pull out the positions from the position\n  // buffer into the vertexPosition attribute\n  {\n    const numComponents = 3;\n    const type = gl.FLOAT;\n    const normalize = false;\n    const stride = 0;\n    const offset = 0;\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\n    gl.vertexAttribPointer(\n      programInfo.attribLocations.vertexPosition,\n      numComponents,\n      type,\n      normalize,\n      stride,\n      offset\n    );\n    gl.enableVertexAttribArray(programInfo.attribLocations.vertexPosition);\n  }\n\n  // Tell WebGL how to pull out the colors from the color buffer\n  // into the vertexColor attribute.\n  {\n    const numComponents = 4;\n    const type = gl.FLOAT;\n    const normalize = false;\n    const stride = 0;\n    const offset = 0;\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffers.color);\n    gl.vertexAttribPointer(\n      programInfo.attribLocations.vertexColor,\n      numComponents,\n      type,\n      normalize,\n      stride,\n      offset\n    );\n    gl.enableVertexAttribArray(programInfo.attribLocations.vertexColor);\n  }\n\n  // Tell WebGL which indices to use to index the vertices\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);\n\n  // Tell WebGL to use our program when drawing\n\n  gl.useProgram(programInfo.program);\n\n  // Set the shader uniforms\n\n  gl.uniformMatrix4fv(\n    programInfo.uniformLocations.projectionMatrix,\n    false,\n    projectionMatrix\n  );\n  gl.uniformMatrix4fv(\n    programInfo.uniformLocations.modelViewMatrix,\n    false,\n    modelViewMatrix\n  );\n\n  {\n    const vertexCount = 36;\n    const type = gl.UNSIGNED_SHORT;\n    const offset = 0;\n    gl.drawElements(gl.TRIANGLES, vertexCount, type, offset);\n  }\n};\n\nexport default drawScene;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport createShaderProgram from \"./createShaderProgram\";\nimport initBuffers from \"./initBuffers\";\nimport drawScene from \"./drawScene\";\n\nconst getGl = canvas => {\n  const gl = canvas.getContext(\"webgl\");\n  // Só continua se o WebGL estiver disponível e funcionando\n  if (!gl) {\n    alert(\n      \"Incapaz de inicializar o WebGL.Seu navegador ou sua máquina não suporta.\"\n    );\n    return;\n  }\n  return gl;\n};\nconst createProgramInfo = gl => {\n  const shaderProgram = createShaderProgram(gl);\n  return {\n    program: shaderProgram,\n    attribLocations: {\n      vertexPosition: gl.getAttribLocation(shaderProgram, \"aVertexPosition\"),\n      vertexColor: gl.getAttribLocation(shaderProgram, \"aVertexColor\")\n    },\n    uniformLocations: {\n      projectionMatrix: gl.getUniformLocation(\n        shaderProgram,\n        \"uProjectionMatrix\"\n      ),\n      modelViewMatrix: gl.getUniformLocation(shaderProgram, \"uModelViewMatrix\")\n    }\n  };\n};\nconst hasPropsChanged = (props, prevProps, namesOfProps) =>\n  !!namesOfProps.find(propName => props[propName] !== prevProps);\n\nclass CanvasCube extends Component {\n  componentDidMount() {\n    this.gl = getGl(this.canvas);\n    if (!this.gl) {\n      return;\n    }\n    this.programInfo = createProgramInfo(this.gl);\n    this.buffers = initBuffers(this.gl);\n\n    requestAnimationFrame(this.renderCanvas);\n  }\n  componentDidUpdate(prevProps) {\n    if (!this.gl) {\n      return;\n    }\n    const propsCompare = [\"rotationX\", \"rotationY\", \"rotationZ\"];\n    if (hasPropsChanged(this.props, prevProps, propsCompare)) {\n      requestAnimationFrame(this.renderCanvas);\n    }\n  }\n  renderCanvas = () => {\n    const { rotationX, rotationY, rotationZ } = this.props;\n    drawScene(\n      this.gl,\n      this.programInfo,\n      this.buffers,\n      rotationX,\n      rotationY,\n      rotationZ\n    );\n  };\n  render() {\n    return (\n      <canvas ref={canvas => (this.canvas = canvas)} width=\"640\" height=\"480\" />\n    );\n  }\n}\nCanvasCube.propTypes = {\n  rotationX: PropTypes.number.isRequired,\n  rotationY: PropTypes.number.isRequired,\n  rotationZ: PropTypes.number.isRequired\n};\n\nexport default CanvasCube;\n","import CubeExample from \"./CubeExample\";\n\nexport default CubeExample;\n","import React, { Component } from \"react\";\nimport \"./CubeExample.css\";\nimport CanvasCube from \"./CanvasCube\";\n\nclass CubeExample extends Component {\n  state = {\n    rotationX: 0.0,\n    rotationY: 0.7,\n    rotationZ: 1.0\n  };\n  render() {\n    const { rotationX, rotationY, rotationZ } = this.state;\n    return (\n      <div className=\"page\">\n        <h1>Cube Example</h1>\n        <div className=\"containerCanvas\">\n          <CanvasCube\n            rotationX={rotationX}\n            rotationY={rotationY}\n            rotationZ={rotationZ}\n          />\n        </div>\n        <p>\n          <span>Rotation X in radians: </span>\n          <input\n            type=\"number\"\n            step={0.01}\n            value={rotationX}\n            onChange={event => this.setState({ rotationX: event.target.value })}\n          />\n        </p>\n        <p>\n          <span>Rotation Y in radians: </span>\n          <input\n            type=\"number\"\n            step={0.01}\n            value={rotationY}\n            onChange={event => this.setState({ rotationY: event.target.value })}\n          />\n        </p>\n        <p>\n          <span>Rotation Z in radians: </span>\n          <input\n            type=\"number\"\n            step={0.01}\n            value={rotationZ}\n            onChange={event => this.setState({ rotationZ: event.target.value })}\n          />\n        </p>\n        <p>\n          Source Code:\n          <ul>\n            <li>\n              <a href=\"https://github.com/pethersonmoreno/webgl-analytical-geometry/tree/feature/first-webgl-with-react/src/pages/CubeExample\">\n                CubeExample\n              </a>\n            </li>\n          </ul>\n        </p>\n        <p>\n          Done based on:\n          <ul>\n            <li>\n              <a href=\"https://mdn.github.io/webgl-examples/tutorial/sample5/index.html\">\n                Sample 5 of webgl-examples\n              </a>\n            </li>\n            <li>\n              <a href=\"https://github.com/mdn/webgl-examples/tree/gh-pages/tutorial/sample5\">\n                Source Code of Sample 5 of webgl-examples\n              </a>\n            </li>\n          </ul>\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default CubeExample;\n","import React from \"react\";\nimport { Route, HashRouter as Router } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport CubeExample from \"./pages/CubeExample\";\n\nconst App = () => (\n    <Router>\n        <div>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/cube-example\" component={CubeExample} />\n        </div>\n    </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}