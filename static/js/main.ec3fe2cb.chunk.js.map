{"version":3,"sources":["pages/Home.js","pages/CubeExample/loadShader.js","pages/CubeExample/createShaderProgram.js","pages/CubeExample/vsSource.js","pages/CubeExample/fsSource.js","pages/CubeExample/drawScene.js","pages/CubeExample/initBuffers.js","pages/CubeExample/index.js","pages/CubeExample/CubeExample.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","react_router_dom","to","loadShader","gl","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","errorMessage","getShaderInfoLog","deleteShader","Error","createShaderProgram","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","drawScene","programInfo","buffers","deltaTime","cubeRotation","clearColor","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","fieldOfView","Math","PI","aspect","canvas","clientWidth","clientHeight","projectionMatrix","mat4","create","perspective","modelViewMatrix","translate","rotate","FLOAT","bindBuffer","ARRAY_BUFFER","position","vertexAttribPointer","attribLocations","vertexPosition","enableVertexAttribArray","color","vertexColor","ELEMENT_ARRAY_BUFFER","indices","useProgram","program","uniformMatrix4fv","uniformLocations","UNSIGNED_SHORT","drawElements","TRIANGLES","initBuffers","positionBuffer","createBuffer","bufferData","Float32Array","STATIC_DRAW","faceColors","colors","j","length","c","concat","colorBuffer","indexBuffer","Uint16Array","CubeExample","getContext","alert","getGl","this","getAttribLocation","getUniformLocation","then","requestAnimationFrame","render","now","_this","className","ref","width","height","href","Component","App","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ec3fe2cb.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Home = () => (\n    <section>\n        <ul>\n            <li>\n                <Link to=\"/cube-example\">Cube Example</Link>\n            </li>\n        </ul>\n    </section>\n);\nexport default Home;\n","const loadShader = (gl, type, source) => {\n    const shader = gl.createShader(type);\n\n    // Send the source to the shader object\n\n    gl.shaderSource(shader, source);\n\n    // Compile the shader program\n\n    gl.compileShader(shader);\n\n    // See if it compiled successfully\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        const errorMessage =\n            \"An error occurred compiling the shaders: \" +\n            gl.getShaderInfoLog(shader);\n        gl.deleteShader(shader);\n        throw new Error(errorMessage);\n    }\n\n    return shader;\n};\n\nexport default loadShader;\n","import loadShader from \"./loadShader\";\nimport vsSource from \"./vsSource\";\nimport fsSource from \"./fsSource\";\n\nconst createShaderProgram = gl => {\n    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);\n    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\n\n    // Create the shader program\n\n    const shaderProgram = gl.createProgram();\n    gl.attachShader(shaderProgram, vertexShader);\n    gl.attachShader(shaderProgram, fragmentShader);\n    gl.linkProgram(shaderProgram);\n\n    // If creating the shader program failed, alert\n\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n        throw new Error(\n            \"Unable to initialize the shader program: \" +\n                gl.getProgramInfoLog(shaderProgram)\n        );\n    }\n\n    return shaderProgram;\n};\n\nexport default createShaderProgram;\n","const vsSource = `\n    attribute vec4 aVertexPosition;\n    attribute vec4 aVertexColor;\n\n    uniform mat4 uModelViewMatrix;\n    uniform mat4 uProjectionMatrix;\n\n    varying lowp vec4 vColor;\n\n    void main(void) {\n      gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\n      vColor = aVertexColor;\n    }\n  `;\n\nexport default vsSource;\n","const fsSource = `\n    varying lowp vec4 vColor;\n\n    void main(void) {\n      gl_FragColor = vColor;\n    }\n  `;\nexport default fsSource;\n","import { mat4 } from \"gl-matrix\";\n\nconst drawScene = (gl, programInfo, buffers, deltaTime, cubeRotation) => {\n    gl.clearColor(1.0, 1.0, 1.0, 1.0); // Clear to black, fully opaque\n    gl.clearDepth(1.0); // Clear everything\n    gl.enable(gl.DEPTH_TEST); // Enable depth testing\n    gl.depthFunc(gl.LEQUAL); // Near things obscure far things\n\n    // Clear the canvas before we start drawing on it.\n\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n    // Create a perspective matrix, a special matrix that is\n    // used to simulate the distortion of perspective in a camera.\n    // Our field of view is 45 degrees, with a width/height\n    // ratio that matches the display size of the canvas\n    // and we only want to see objects between 0.1 units\n    // and 100 units away from the camera.\n\n    const fieldOfView = (45 * Math.PI) / 180; // in radians\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\n    const zNear = 0.1;\n    const zFar = 100.0;\n    const projectionMatrix = mat4.create();\n\n    // note: glmatrix.js always has the first argument\n    // as the destination to receive the result.\n    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\n\n    // Set the drawing position to the \"identity\" point, which is\n    // the center of the scene.\n    const modelViewMatrix = mat4.create();\n\n    // Now move the drawing position a bit to where we want to\n    // start drawing the square.\n\n    mat4.translate(\n        modelViewMatrix, // destination matrix\n        modelViewMatrix, // matrix to translate\n        [-0.0, 0.0, -6.0]\n    ); // amount to translate\n    mat4.rotate(\n        modelViewMatrix, // destination matrix\n        modelViewMatrix, // matrix to rotate\n        cubeRotation, // amount to rotate in radians\n        [0, 0, 1]\n    ); // axis to rotate around (Z)\n    mat4.rotate(\n        modelViewMatrix, // destination matrix\n        modelViewMatrix, // matrix to rotate\n        cubeRotation * 0.7, // amount to rotate in radians\n        [0, 1, 0]\n    ); // axis to rotate around (X)\n\n    // Tell WebGL how to pull out the positions from the position\n    // buffer into the vertexPosition attribute\n    {\n        const numComponents = 3;\n        const type = gl.FLOAT;\n        const normalize = false;\n        const stride = 0;\n        const offset = 0;\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\n        gl.vertexAttribPointer(\n            programInfo.attribLocations.vertexPosition,\n            numComponents,\n            type,\n            normalize,\n            stride,\n            offset\n        );\n        gl.enableVertexAttribArray(programInfo.attribLocations.vertexPosition);\n    }\n\n    // Tell WebGL how to pull out the colors from the color buffer\n    // into the vertexColor attribute.\n    {\n        const numComponents = 4;\n        const type = gl.FLOAT;\n        const normalize = false;\n        const stride = 0;\n        const offset = 0;\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffers.color);\n        gl.vertexAttribPointer(\n            programInfo.attribLocations.vertexColor,\n            numComponents,\n            type,\n            normalize,\n            stride,\n            offset\n        );\n        gl.enableVertexAttribArray(programInfo.attribLocations.vertexColor);\n    }\n\n    // Tell WebGL which indices to use to index the vertices\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);\n\n    // Tell WebGL to use our program when drawing\n\n    gl.useProgram(programInfo.program);\n\n    // Set the shader uniforms\n\n    gl.uniformMatrix4fv(\n        programInfo.uniformLocations.projectionMatrix,\n        false,\n        projectionMatrix\n    );\n    gl.uniformMatrix4fv(\n        programInfo.uniformLocations.modelViewMatrix,\n        false,\n        modelViewMatrix\n    );\n\n    {\n        const vertexCount = 36;\n        const type = gl.UNSIGNED_SHORT;\n        const offset = 0;\n        gl.drawElements(gl.TRIANGLES, vertexCount, type, offset);\n    }\n\n    // Update the rotation for the next draw\n\n    cubeRotation += deltaTime;\n    return cubeRotation;\n};\n\nexport default drawScene;\n","const initBuffers = gl => {\n    // Create a buffer for the cube's vertex positions.\n\n    const positionBuffer = gl.createBuffer();\n\n    // Select the positionBuffer as the one to apply buffer\n    // operations to from here out.\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n    // Now create an array of positions for the cube.\n\n    const positions = [\n        // Front face\n        -1.0,\n        -1.0,\n        1.0,\n        1.0,\n        -1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        -1.0,\n        1.0,\n        1.0,\n\n        // Back face\n        -1.0,\n        -1.0,\n        -1.0,\n        -1.0,\n        1.0,\n        -1.0,\n        1.0,\n        1.0,\n        -1.0,\n        1.0,\n        -1.0,\n        -1.0,\n\n        // Top face\n        -1.0,\n        1.0,\n        -1.0,\n        -1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        -1.0,\n\n        // Bottom face\n        -1.0,\n        -1.0,\n        -1.0,\n        1.0,\n        -1.0,\n        -1.0,\n        1.0,\n        -1.0,\n        1.0,\n        -1.0,\n        -1.0,\n        1.0,\n\n        // Right face\n        1.0,\n        -1.0,\n        -1.0,\n        1.0,\n        1.0,\n        -1.0,\n        1.0,\n        1.0,\n        1.0,\n        1.0,\n        -1.0,\n        1.0,\n\n        // Left face\n        -1.0,\n        -1.0,\n        -1.0,\n        -1.0,\n        -1.0,\n        1.0,\n        -1.0,\n        1.0,\n        1.0,\n        -1.0,\n        1.0,\n        -1.0\n    ];\n\n    // Now pass the list of positions into WebGL to build the\n    // shape. We do this by creating a Float32Array from the\n    // JavaScript array, then use it to fill the current buffer.\n\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\n\n    // Now set up the colors for the faces. We'll use solid colors\n    // for each face.\n\n    const faceColors = [\n        [0.5, 0.5, 0.5, 1.0], // Front face: white\n        [1.0, 0.0, 0.0, 1.0], // Back face: red\n        [0.0, 1.0, 0.0, 1.0], // Top face: green\n        [0.0, 0.0, 1.0, 1.0], // Bottom face: blue\n        [1.0, 1.0, 0.0, 1.0], // Right face: yellow\n        [1.0, 0.0, 1.0, 1.0] // Left face: purple\n    ];\n\n    // Convert the array of colors into a table for all the vertices.\n\n    var colors = [];\n\n    for (var j = 0; j < faceColors.length; ++j) {\n        const c = faceColors[j];\n\n        // Repeat each color four times for the four vertices of the face\n        colors = colors.concat(c, c, c, c);\n    }\n\n    const colorBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);\n\n    // Build the element array buffer; this specifies the indices\n    // into the vertex arrays for each face's vertices.\n\n    const indexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\n\n    // This array defines each face as two triangles, using the\n    // indices into the vertex array to specify each triangle's\n    // position.\n\n    const indices = [\n        0,\n        1,\n        2,\n        0,\n        2,\n        3, // front\n        4,\n        5,\n        6,\n        4,\n        6,\n        7, // back\n        8,\n        9,\n        10,\n        8,\n        10,\n        11, // top\n        12,\n        13,\n        14,\n        12,\n        14,\n        15, // bottom\n        16,\n        17,\n        18,\n        16,\n        18,\n        19, // right\n        20,\n        21,\n        22,\n        20,\n        22,\n        23 // left\n    ];\n\n    // Now send the element array to GL\n\n    gl.bufferData(\n        gl.ELEMENT_ARRAY_BUFFER,\n        new Uint16Array(indices),\n        gl.STATIC_DRAW\n    );\n\n    return {\n        position: positionBuffer,\n        color: colorBuffer,\n        indices: indexBuffer\n    };\n};\n\nexport default initBuffers;\n","import CubeExample from \"./CubeExample\";\n\nexport default CubeExample;\n","import React, { Component } from \"react\";\nimport \"./CubeExample.css\";\nimport createShaderProgram from \"./createShaderProgram\";\nimport drawScene from \"./drawScene\";\nimport initBuffers from \"./initBuffers\";\n\nconst getGl = canvas => {\n    const gl = canvas.getContext(\"webgl\");\n    // Só continua se o WebGL estiver disponível e funcionando\n    if (!gl) {\n        alert(\n            \"Incapaz de inicializar o WebGL.Seu navegador ou sua máquina não suporta.\"\n        );\n        return;\n    }\n    return gl;\n};\nclass CubeExample extends Component {\n    componentDidMount() {\n        const gl = getGl(this.canvas);\n        if (!gl) {\n            return;\n        }\n        const shaderProgram = createShaderProgram(gl);\n        const programInfo = {\n            program: shaderProgram,\n            attribLocations: {\n                vertexPosition: gl.getAttribLocation(\n                    shaderProgram,\n                    \"aVertexPosition\"\n                ),\n                vertexColor: gl.getAttribLocation(shaderProgram, \"aVertexColor\")\n            },\n            uniformLocations: {\n                projectionMatrix: gl.getUniformLocation(\n                    shaderProgram,\n                    \"uProjectionMatrix\"\n                ),\n                modelViewMatrix: gl.getUniformLocation(\n                    shaderProgram,\n                    \"uModelViewMatrix\"\n                )\n            }\n        };\n        const buffers = initBuffers(gl);\n\n        var then = 0;\n\n        let cubeRotation = 0.0;\n        // Draw the scene repeatedly\n        const render = now => {\n            now *= 0.001; // convert to seconds\n            const deltaTime = now - then;\n            then = now;\n\n            cubeRotation = drawScene(\n                gl,\n                programInfo,\n                buffers,\n                deltaTime,\n                cubeRotation\n            );\n\n            requestAnimationFrame(render);\n        };\n        requestAnimationFrame(render);\n    }\n    render() {\n        return (\n            <div className=\"page\">\n                <h1>Cube Example</h1>\n                <div className=\"containerCanvas\">\n                    <canvas\n                        ref={canvas => (this.canvas = canvas)}\n                        width=\"640\"\n                        height=\"480\"\n                    />\n                </div>\n                <p>\n                    Source Code:\n                    <ul>\n                        <li>\n                            <a href=\"https://github.com/pethersonmoreno/webgl-analytical-geometry/tree/feature/first-webgl-with-react/src/pages/CubeExample\">\n                                CubeExample\n                            </a>\n                        </li>\n                    </ul>\n                </p>\n                <p>\n                    Done based on:\n                    <ul>\n                        <li>\n                            <a href=\"https://mdn.github.io/webgl-examples/tutorial/sample5/index.html\">\n                                Sample 5 of webgl-examples\n                            </a>\n                        </li>\n                        <li>\n                            <a href=\"https://github.com/mdn/webgl-examples/tree/gh-pages/tutorial/sample5\">\n                                Source Code of Sample 5 of webgl-examples\n                            </a>\n                        </li>\n                    </ul>\n                </p>\n            </div>\n        );\n    }\n}\n\nexport default CubeExample;\n","import React from \"react\";\nimport { Route, HashRouter as Router } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport CubeExample from \"./pages/CubeExample\";\n\nconst App = () => (\n    <Router>\n        <div>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/cube-example\" component={CubeExample} />\n        </div>\n    </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}