{"version":3,"sources":["pages/Home.js","pages/CubeExample/loadShader.js","pages/CubeExample/createShaderProgram.js","pages/CubeExample/vsSource.js","pages/CubeExample/fsSource.js","pages/CubeExample/initBuffers.js","pages/CubeExample/drawScene.js","pages/CubeExample/CanvasCube.js","pages/CubeExample/CubeExample.js","pages/CubeExample/index.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","react_router_dom","to","loadShader","gl","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","errorMessage","getShaderInfoLog","deleteShader","Error","createShaderProgram","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","initBuffers","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","faceColors","colors","j","length","c","concat","colorBuffer","indexBuffer","ELEMENT_ARRAY_BUFFER","Uint16Array","position","color","indices","drawScene","programInfo","buffers","rotationX","rotationY","rotationZ","clearColor","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","fieldOfView","Math","PI","aspect","canvas","clientWidth","clientHeight","projectionMatrix","mat4","create","perspective","modelViewMatrix","translate","rotate","FLOAT","vertexAttribPointer","attribLocations","vertexPosition","enableVertexAttribArray","vertexColor","useProgram","program","uniformMatrix4fv","uniformLocations","UNSIGNED_SHORT","drawElements","TRIANGLES","CanvasCube","renderCanvas","_this$props","_this","props","this","getContext","alert","getGl","getAttribLocation","getUniformLocation","createProgramInfo","requestAnimationFrame","prevProps","namesOfProps","find","propName","hasPropsChanged","_this2","ref","width","height","Component","getDiffPixelsInRadians","pixels","getPosFromTouch","touch","x","clientX","y","clientY","getPosFromMouseEvent","event","CubeExample","state","pos","onTouchStart","e","setState","touches","onTouchMove","changedTouches","onUpdatePos","onTouchEnd","onMouseDown","onMouseMove","onMouseUp","console","log","onMouseOut","newPos","_this$state","_this$state2","className","CubeExample_CanvasCube","step","value","onChange","target","href","App","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8478c13b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Home = () => (\r\n    <section>\r\n        <ul>\r\n            <li>\r\n                <Link to=\"/cube-example\">Cube Example</Link>\r\n            </li>\r\n        </ul>\r\n    </section>\r\n);\r\nexport default Home;\r\n","const loadShader = (gl, type, source) => {\r\n    const shader = gl.createShader(type);\r\n\r\n    // Send the source to the shader object\r\n\r\n    gl.shaderSource(shader, source);\r\n\r\n    // Compile the shader program\r\n\r\n    gl.compileShader(shader);\r\n\r\n    // See if it compiled successfully\r\n\r\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n        const errorMessage =\r\n            \"An error occurred compiling the shaders: \" +\r\n            gl.getShaderInfoLog(shader);\r\n        gl.deleteShader(shader);\r\n        throw new Error(errorMessage);\r\n    }\r\n\r\n    return shader;\r\n};\r\n\r\nexport default loadShader;\r\n","import loadShader from \"./loadShader\";\r\nimport vsSource from \"./vsSource\";\r\nimport fsSource from \"./fsSource\";\r\n\r\nconst createShaderProgram = gl => {\r\n    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);\r\n    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\r\n\r\n    // Create the shader program\r\n\r\n    const shaderProgram = gl.createProgram();\r\n    gl.attachShader(shaderProgram, vertexShader);\r\n    gl.attachShader(shaderProgram, fragmentShader);\r\n    gl.linkProgram(shaderProgram);\r\n\r\n    // If creating the shader program failed, alert\r\n\r\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n        throw new Error(\r\n            \"Unable to initialize the shader program: \" +\r\n                gl.getProgramInfoLog(shaderProgram)\r\n        );\r\n    }\r\n\r\n    return shaderProgram;\r\n};\r\n\r\nexport default createShaderProgram;\r\n","const vsSource = `\r\n    attribute vec4 aVertexPosition;\r\n    attribute vec4 aVertexColor;\r\n\r\n    uniform mat4 uModelViewMatrix;\r\n    uniform mat4 uProjectionMatrix;\r\n\r\n    varying lowp vec4 vColor;\r\n\r\n    void main(void) {\r\n      gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\r\n      vColor = aVertexColor;\r\n    }\r\n  `;\r\n\r\nexport default vsSource;\r\n","const fsSource = `\r\n    varying lowp vec4 vColor;\r\n\r\n    void main(void) {\r\n      gl_FragColor = vColor;\r\n    }\r\n  `;\r\nexport default fsSource;\r\n","const initBuffers = gl => {\r\n    // Create a buffer for the cube's vertex positions.\r\n\r\n    const positionBuffer = gl.createBuffer();\r\n\r\n    // Select the positionBuffer as the one to apply buffer\r\n    // operations to from here out.\r\n\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\r\n    // Now create an array of positions for the cube.\r\n\r\n    const positions = [\r\n        // Front face\r\n        -1.0,\r\n        -1.0,\r\n        1.0,\r\n        1.0,\r\n        -1.0,\r\n        1.0,\r\n        1.0,\r\n        1.0,\r\n        1.0,\r\n        -1.0,\r\n        1.0,\r\n        1.0,\r\n\r\n        // Back face\r\n        -1.0,\r\n        -1.0,\r\n        -1.0,\r\n        -1.0,\r\n        1.0,\r\n        -1.0,\r\n        1.0,\r\n        1.0,\r\n        -1.0,\r\n        1.0,\r\n        -1.0,\r\n        -1.0,\r\n\r\n        // Top face\r\n        -1.0,\r\n        1.0,\r\n        -1.0,\r\n        -1.0,\r\n        1.0,\r\n        1.0,\r\n        1.0,\r\n        1.0,\r\n        1.0,\r\n        1.0,\r\n        1.0,\r\n        -1.0,\r\n\r\n        // Bottom face\r\n        -1.0,\r\n        -1.0,\r\n        -1.0,\r\n        1.0,\r\n        -1.0,\r\n        -1.0,\r\n        1.0,\r\n        -1.0,\r\n        1.0,\r\n        -1.0,\r\n        -1.0,\r\n        1.0,\r\n\r\n        // Right face\r\n        1.0,\r\n        -1.0,\r\n        -1.0,\r\n        1.0,\r\n        1.0,\r\n        -1.0,\r\n        1.0,\r\n        1.0,\r\n        1.0,\r\n        1.0,\r\n        -1.0,\r\n        1.0,\r\n\r\n        // Left face\r\n        -1.0,\r\n        -1.0,\r\n        -1.0,\r\n        -1.0,\r\n        -1.0,\r\n        1.0,\r\n        -1.0,\r\n        1.0,\r\n        1.0,\r\n        -1.0,\r\n        1.0,\r\n        -1.0\r\n    ];\r\n\r\n    // Now pass the list of positions into WebGL to build the\r\n    // shape. We do this by creating a Float32Array from the\r\n    // JavaScript array, then use it to fill the current buffer.\r\n\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\r\n\r\n    // Now set up the colors for the faces. We'll use solid colors\r\n    // for each face.\r\n\r\n    const faceColors = [\r\n        [0.5, 0.5, 0.5, 1.0], // Front face: white\r\n        [1.0, 0.0, 0.0, 1.0], // Back face: red\r\n        [0.0, 1.0, 0.0, 1.0], // Top face: green\r\n        [0.0, 0.0, 1.0, 1.0], // Bottom face: blue\r\n        [1.0, 1.0, 0.0, 1.0], // Right face: yellow\r\n        [1.0, 0.0, 1.0, 1.0] // Left face: purple\r\n    ];\r\n\r\n    // Convert the array of colors into a table for all the vertices.\r\n\r\n    var colors = [];\r\n\r\n    for (var j = 0; j < faceColors.length; ++j) {\r\n        const c = faceColors[j];\r\n\r\n        // Repeat each color four times for the four vertices of the face\r\n        colors = colors.concat(c, c, c, c);\r\n    }\r\n\r\n    const colorBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);\r\n\r\n    // Build the element array buffer; this specifies the indices\r\n    // into the vertex arrays for each face's vertices.\r\n\r\n    const indexBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n\r\n    // This array defines each face as two triangles, using the\r\n    // indices into the vertex array to specify each triangle's\r\n    // position.\r\n\r\n    const indices = [\r\n        0,\r\n        1,\r\n        2,\r\n        0,\r\n        2,\r\n        3, // front\r\n        4,\r\n        5,\r\n        6,\r\n        4,\r\n        6,\r\n        7, // back\r\n        8,\r\n        9,\r\n        10,\r\n        8,\r\n        10,\r\n        11, // top\r\n        12,\r\n        13,\r\n        14,\r\n        12,\r\n        14,\r\n        15, // bottom\r\n        16,\r\n        17,\r\n        18,\r\n        16,\r\n        18,\r\n        19, // right\r\n        20,\r\n        21,\r\n        22,\r\n        20,\r\n        22,\r\n        23 // left\r\n    ];\r\n\r\n    // Now send the element array to GL\r\n\r\n    gl.bufferData(\r\n        gl.ELEMENT_ARRAY_BUFFER,\r\n        new Uint16Array(indices),\r\n        gl.STATIC_DRAW\r\n    );\r\n\r\n    return {\r\n        position: positionBuffer,\r\n        color: colorBuffer,\r\n        indices: indexBuffer\r\n    };\r\n};\r\n\r\nexport default initBuffers;\r\n","import { mat4 } from \"gl-matrix\";\r\n\r\nconst drawScene = (\r\n  gl,\r\n  programInfo,\r\n  buffers,\r\n  rotationX,\r\n  rotationY,\r\n  rotationZ\r\n) => {\r\n  gl.clearColor(1.0, 1.0, 1.0, 1.0); // Clear to black, fully opaque\r\n  gl.clearDepth(1.0); // Clear everything\r\n  gl.enable(gl.DEPTH_TEST); // Enable depth testing\r\n  gl.depthFunc(gl.LEQUAL); // Near things obscure far things\r\n\r\n  // Clear the canvas before we start drawing on it.\r\n\r\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n  // Create a perspective matrix, a special matrix that is\r\n  // used to simulate the distortion of perspective in a camera.\r\n  // Our field of view is 45 degrees, with a width/height\r\n  // ratio that matches the display size of the canvas\r\n  // and we only want to see objects between 0.1 units\r\n  // and 100 units away from the camera.\r\n\r\n  const fieldOfView = (45 * Math.PI) / 180; // in radians\r\n  const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n  const zNear = 0.1;\r\n  const zFar = 100.0;\r\n  const projectionMatrix = mat4.create();\r\n\r\n  // note: glmatrix.js always has the first argument\r\n  // as the destination to receive the result.\r\n  mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar);\r\n\r\n  // Set the drawing position to the \"identity\" point, which is\r\n  // the center of the scene.\r\n  const modelViewMatrix = mat4.create();\r\n\r\n  // Now move the drawing position a bit to where we want to\r\n  // start drawing the square.\r\n\r\n  mat4.translate(\r\n    modelViewMatrix, // destination matrix\r\n    modelViewMatrix, // matrix to translate\r\n    [-0.0, 0.0, -6.0]\r\n  ); // amount to translate\r\n  mat4.rotate(\r\n    modelViewMatrix, // destination matrix\r\n    modelViewMatrix, // matrix to rotate\r\n    rotationX, // amount to rotate in radians\r\n    [1, 0, 0]\r\n  ); // axis to rotate around (X)\r\n  mat4.rotate(\r\n    modelViewMatrix, // destination matrix\r\n    modelViewMatrix, // matrix to rotate\r\n    rotationY, // amount to rotate in radians\r\n    [0, 1, 0]\r\n  ); // axis to rotate around (Y)\r\n  mat4.rotate(\r\n    modelViewMatrix, // destination matrix\r\n    modelViewMatrix, // matrix to rotate\r\n    rotationZ, // amount to rotate in radians\r\n    [0, 0, 1]\r\n  ); // axis to rotate around (Z)\r\n\r\n  // Tell WebGL how to pull out the positions from the position\r\n  // buffer into the vertexPosition attribute\r\n  {\r\n    const numComponents = 3;\r\n    const type = gl.FLOAT;\r\n    const normalize = false;\r\n    const stride = 0;\r\n    const offset = 0;\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\r\n    gl.vertexAttribPointer(\r\n      programInfo.attribLocations.vertexPosition,\r\n      numComponents,\r\n      type,\r\n      normalize,\r\n      stride,\r\n      offset\r\n    );\r\n    gl.enableVertexAttribArray(programInfo.attribLocations.vertexPosition);\r\n  }\r\n\r\n  // Tell WebGL how to pull out the colors from the color buffer\r\n  // into the vertexColor attribute.\r\n  {\r\n    const numComponents = 4;\r\n    const type = gl.FLOAT;\r\n    const normalize = false;\r\n    const stride = 0;\r\n    const offset = 0;\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffers.color);\r\n    gl.vertexAttribPointer(\r\n      programInfo.attribLocations.vertexColor,\r\n      numComponents,\r\n      type,\r\n      normalize,\r\n      stride,\r\n      offset\r\n    );\r\n    gl.enableVertexAttribArray(programInfo.attribLocations.vertexColor);\r\n  }\r\n\r\n  // Tell WebGL which indices to use to index the vertices\r\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);\r\n\r\n  // Tell WebGL to use our program when drawing\r\n\r\n  gl.useProgram(programInfo.program);\r\n\r\n  // Set the shader uniforms\r\n\r\n  gl.uniformMatrix4fv(\r\n    programInfo.uniformLocations.projectionMatrix,\r\n    false,\r\n    projectionMatrix\r\n  );\r\n  gl.uniformMatrix4fv(\r\n    programInfo.uniformLocations.modelViewMatrix,\r\n    false,\r\n    modelViewMatrix\r\n  );\r\n\r\n  {\r\n    const vertexCount = 36;\r\n    const type = gl.UNSIGNED_SHORT;\r\n    const offset = 0;\r\n    gl.drawElements(gl.TRIANGLES, vertexCount, type, offset);\r\n  }\r\n};\r\n\r\nexport default drawScene;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport createShaderProgram from \"./createShaderProgram\";\r\nimport initBuffers from \"./initBuffers\";\r\nimport drawScene from \"./drawScene\";\r\n\r\nconst getGl = canvas => {\r\n  const gl = canvas.getContext(\"webgl\");\r\n  // Só continua se o WebGL estiver disponível e funcionando\r\n  if (!gl) {\r\n    alert(\r\n      \"Incapaz de inicializar o WebGL.Seu navegador ou sua máquina não suporta.\"\r\n    );\r\n    return;\r\n  }\r\n  return gl;\r\n};\r\nconst createProgramInfo = gl => {\r\n  const shaderProgram = createShaderProgram(gl);\r\n  return {\r\n    program: shaderProgram,\r\n    attribLocations: {\r\n      vertexPosition: gl.getAttribLocation(shaderProgram, \"aVertexPosition\"),\r\n      vertexColor: gl.getAttribLocation(shaderProgram, \"aVertexColor\")\r\n    },\r\n    uniformLocations: {\r\n      projectionMatrix: gl.getUniformLocation(\r\n        shaderProgram,\r\n        \"uProjectionMatrix\"\r\n      ),\r\n      modelViewMatrix: gl.getUniformLocation(shaderProgram, \"uModelViewMatrix\")\r\n    }\r\n  };\r\n};\r\nconst hasPropsChanged = (props, prevProps, namesOfProps) =>\r\n  !!namesOfProps.find(propName => props[propName] !== prevProps);\r\n\r\nclass CanvasCube extends Component {\r\n  componentDidMount() {\r\n    this.gl = getGl(this.canvas);\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    this.programInfo = createProgramInfo(this.gl);\r\n    this.buffers = initBuffers(this.gl);\r\n\r\n    requestAnimationFrame(this.renderCanvas);\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    if (!this.gl) {\r\n      return;\r\n    }\r\n    const propsCompare = [\"rotationX\", \"rotationY\", \"rotationZ\"];\r\n    if (hasPropsChanged(this.props, prevProps, propsCompare)) {\r\n      requestAnimationFrame(this.renderCanvas);\r\n    }\r\n  }\r\n  renderCanvas = () => {\r\n    const { rotationX, rotationY, rotationZ } = this.props;\r\n    drawScene(\r\n      this.gl,\r\n      this.programInfo,\r\n      this.buffers,\r\n      rotationX,\r\n      rotationY,\r\n      rotationZ\r\n    );\r\n  };\r\n  render() {\r\n    return (\r\n      <canvas ref={canvas => (this.canvas = canvas)} width=\"640\" height=\"480\" />\r\n    );\r\n  }\r\n}\r\nCanvasCube.propTypes = {\r\n  rotationX: PropTypes.number.isRequired,\r\n  rotationY: PropTypes.number.isRequired,\r\n  rotationZ: PropTypes.number.isRequired\r\n};\r\n\r\nexport default CanvasCube;\r\n","import React, { Component } from 'react';\r\nimport './CubeExample.css';\r\nimport CanvasCube from './CanvasCube';\r\n\r\nconst getDiffPixelsInRadians = pixels => pixels / 800.0;\r\n\r\nconst getPosFromTouch = touch => ({\r\n  x: touch.clientX,\r\n  y: touch.clientY,\r\n});\r\nconst getPosFromMouseEvent = event => ({\r\n  x: event.clientX,\r\n  y: event.clientY,\r\n});\r\nclass CubeExample extends Component {\r\n  state = {\r\n    rotationX: 0.0,\r\n    rotationY: 0.7,\r\n    rotationZ: 1.0,\r\n    pos: null,\r\n  };\r\n  onTouchStart = e => {\r\n    this.setState({\r\n      pos: getPosFromTouch(e.touches[0]),\r\n    });\r\n  };\r\n\r\n  onTouchMove = e => {\r\n    if (!e.changedTouches || !e.changedTouches.length) {\r\n      return;\r\n    }\r\n    this.onUpdatePos(getPosFromTouch(e.changedTouches[0]));\r\n  };\r\n\r\n  onTouchEnd = e => {\r\n    this.setState({\r\n      pos: null,\r\n    });\r\n  };\r\n\r\n  onMouseDown = e => {\r\n    this.setState({\r\n      pos: getPosFromMouseEvent(e),\r\n    });\r\n  };\r\n\r\n  onMouseMove = e => {\r\n    this.onUpdatePos(getPosFromMouseEvent(e));\r\n  };\r\n\r\n  onMouseUp = e => {\r\n    console.log(e);\r\n    this.setState({\r\n      pos: null,\r\n    });\r\n  };\r\n\r\n  onMouseOut = e => {\r\n    this.setState({\r\n      pos: null,\r\n    });\r\n  };\r\n\r\n  onUpdatePos = newPos =>\r\n    this.setState(state => {\r\n      const { pos, rotationX, rotationY } = this.state;\r\n      if (!pos) {\r\n        return state;\r\n      }\r\n      const newRotationX =\r\n        rotationX + -getDiffPixelsInRadians(pos.x - newPos.x);\r\n      const newRotationY =\r\n        rotationY + -getDiffPixelsInRadians(pos.y - newPos.y);\r\n      return {\r\n        rotationX: newRotationX,\r\n        rotationY: newRotationY,\r\n        pos: newPos,\r\n      };\r\n    });\r\n\r\n  render() {\r\n    const { rotationX, rotationY, rotationZ } = this.state;\r\n    return (\r\n      <div className=\"page\">\r\n        <h1>Cube Example</h1>\r\n        <div\r\n          className=\"containerCanvas\"\r\n          onTouchStart={this.onTouchStart}\r\n          onTouchMove={this.onTouchMove}\r\n          onTouchEnd={this.onTouchEnd}\r\n          onMouseDown={this.onMouseDown}\r\n          onMouseMove={this.onMouseMove}\r\n          onMouseUp={this.onMouseUp}\r\n          onMouseOut={this.onMouseOut}\r\n        >\r\n          >\r\n          <CanvasCube\r\n            rotationX={rotationX}\r\n            rotationY={rotationY}\r\n            rotationZ={rotationZ}\r\n          />\r\n        </div>\r\n        <p>\r\n          <span>Rotation X in radians: </span>\r\n          <input\r\n            type=\"number\"\r\n            step={0.01}\r\n            value={rotationX}\r\n            onChange={event => this.setState({ rotationX: event.target.value })}\r\n          />\r\n        </p>\r\n        <p>\r\n          <span>Rotation Y in radians: </span>\r\n          <input\r\n            type=\"number\"\r\n            step={0.01}\r\n            value={rotationY}\r\n            onChange={event => this.setState({ rotationY: event.target.value })}\r\n          />\r\n        </p>\r\n        <p>\r\n          <span>Rotation Z in radians: </span>\r\n          <input\r\n            type=\"number\"\r\n            step={0.01}\r\n            value={rotationZ}\r\n            onChange={event => this.setState({ rotationZ: event.target.value })}\r\n          />\r\n        </p>\r\n        <p>Source Code:</p>\r\n        <ul>\r\n          <li>\r\n            <a href=\"https://github.com/pethersonmoreno/webgl-analytical-geometry/tree/feature/first-webgl-with-react/src/pages/CubeExample\">\r\n              CubeExample\r\n            </a>\r\n          </li>\r\n        </ul>\r\n        <p>Done based on:</p>\r\n        <ul>\r\n          <li>\r\n            <a href=\"https://mdn.github.io/webgl-examples/tutorial/sample5/index.html\">\r\n              Sample 5 of webgl-examples\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"https://github.com/mdn/webgl-examples/tree/gh-pages/tutorial/sample5\">\r\n              Source Code of Sample 5 of webgl-examples\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CubeExample;\r\n","import CubeExample from \"./CubeExample\";\r\n\r\nexport default CubeExample;\r\n","import React from \"react\";\r\nimport { Route, HashRouter as Router } from \"react-router-dom\";\r\nimport Home from \"./pages/Home\";\r\nimport CubeExample from \"./pages/CubeExample\";\r\n\r\nconst App = () => (\r\n    <Router>\r\n        <div>\r\n            <Route path=\"/\" exact component={Home} />\r\n            <Route path=\"/cube-example\" component={CubeExample} />\r\n        </div>\r\n    </Router>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}